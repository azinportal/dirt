h1. Dirt Readme

Dirt is a reporting frontend to Best Practical ["Request Tracker":http://bestpractical.com/rt/]. It was written to facilitate my work at ["Directi":http://www.directi.com], who kindly let me work on it during regular working hours.

h3. Features

* An arbitrary number of dashboards
* A wiki for documentation
* Tabular reports 
* Prettier than RT (IMO)
* ... more to come (see ["TODO list below":#todo-list])

h3. Installation

Installation is still pretty clunky:	

* Clone the source
* Install Ruby 1.9.3 if you don't already have it. Using ["rvm":https://rvm.io] for this is highly recommended.
* Run @bundle install@ to fetch dependencies. Using rvm's gemsets feature to isolate these dependencies is a good idea.
* Copy @config/database.yml.sample@ to @config/database.yml@ and edit. Note that there are *two* database configurations:
** @rt@ : Your existing Request Tracker database. With the current featureset this can be read-only access. This will change with later releases.
** @dirt@ : A new empty database that you have created for dirt.
* Run @rake db:migrate@ to create the dirt schema.
* Run @cd db; ruby create_views.rb < mapping.json > create-views.sql@
* Review @create-views.sql@ -- TL;DR It create a few views so we have a schema that is ORM friendly and to make report queries more intuitive. 
* Run @create-views.sql@ against your RT database. Consult your RDBMS documentation to find out how to do this. *Note:* @create-views.sql@ uses MySQL's dialect of SQL.
* Run: @RACK_ENV=<env> ruby application.rb@. Ruby rack integration is currently broken.

h4. Really clunky bits

* Add entries into in the projects table in the dirt db. See the default value of @tab_spec@ to configure the tabs of your project.

h3. Using Dirt

* Navigate to http://your.host.name/projects/yourproject/pages
* Use ["textile":http://redcloth.org/textile] syntax to add text content to the page.

h4. Table Macro

* Add a query using the following syntax:

<pre>
<~
{
  "type": "table",
  "sql":"SELECT COUNT(id) AS Count, Owner AS Name FROM expanded_tickets WHERE Queue = 'linux-hosting' AND Status IN('new', 'open', 'stalled') GROUP BY Owner",
  "caption": "Ticket Ownership"
}
~>
</pre>

p. Any arbitrary SQL statement querying the 'expanded_tickets' view can be used to report on tickets.

h4. Aging Macro

Example:

<pre>
<~
{
  "type": "aging",
  "queues":["linux-hosting", "linux-hosting-issues"],
  "caption": "Ticket Aging"
}
~>
</pre>

p. Note that queues *must* be passed an Array, even if it is a single item array.

h4. Simple Taskboard Macro

Example:

<pre>
<~
{
  "type":"simple_task_board",
  "caption":"Taskboard",
  "group_by":"Status",
  "group_sequence":["new","open","stalled"],
  "workstream_selector":"Queue = 'linux-hosting-streams' AND Status IN ('new','open','stalled')",
  "ticket_selector":"Queue = 'linux-hosting'"
}
~>
</pre>

h4. SQL Interpolation

In most places where you provide an complete or partial SQL statement as a parameter to a macro you can use the following macros to simplify things. Note that the macros are case sensitive.

h5. %DATE()

SQL Statements typically expect static dates:

@SELECT * FROM expanded_tickets WHERE LastUpdated > '2012-08-15'@ 

But for a dashboard you'll typically need a relative date. To answer the question, "show me a list of tickets updated in the last week" you can do this:

@SELECT * FROM expanded_tickets WHERE LastUpdated > %DATE(last week)@ 

You can write stuff like:

* last week
* yesterday
* last week thursday
* 4 o'clock last monday

Dirt uses the ["Chronic":https://github.com/mojombo/chronic] gem to parse these description. See ["Chronic's examples":https://github.com/mojombo/chronic#examples] for a complete listing.

h5. %AVG_DAYS_SINCE()

Calculate the average number of days since a date field. Example:

@SELECT Owner, %AVG_DAYS_SINCE(Created) FROM expanded_tickets GROUP BY Owner@

to tabulate the average age of tickets per user.


h3. Bugs

# When editing a new page, clicking 'Cancel' will return to the edit page.
# Ruby Rack support is not working
# -Project Tabs aren't working well-

h3. TODO List

# -Write Documentation-
# -Simpler markup for wikilinks-
# -interpolate current and relative dates into SQL statements-
# -Aging macro-
# -Taskboard macro-
# List/Add/Edit Projects
# Project plan to ticket hierarchy
# View tickets
# Make tickets clickable
# Pie Chart macro
# Bar/Line chart macro
# Layout macros or tags
# Value macro
# Edit Tickets
# Reply/Comment on Tickets
# Simplify installation
# FB macro
# Handle errors better
# Online Help
# Default Queues for queries
# User authentication
# User profile
# Interpolate current logged in user into SQLs
# Add RT db changes to migrations
# Use ACE to edit wiki

h3. Contributing

Standard way: fork, modify and send pull request. User visible changes *must* have documentation patches.

h3. License

Dirt - A reporting frontend to ["Best Practical":http://bestpractical.com] ["Request Tracker":http://bestpractical.com/rt/]
   
Copyright (C) 2012 Biju Philip Chacko

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
